---
name: "Build Deb Packages"

"on":
  push:
  pull_request:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true
jobs:
  # build-deb-package:

  #   name: Build deb packages
  #   strategy:
  #     matrix:
  #       image:
  #         - ubuntu:22.04
  #         - debian:12
  #     fail-fast: false
  #   runs-on: ubuntu-latest
  #   container:
  #     image: ${{ matrix.image }}
  #     env:
  #       DEBIAN_FRONTEND: noninteractive
  #       SCCACHE_GHA_ENABLED: "true"
  #       RUSTC_WRAPPER: "sccache"
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v4
  #     - name: install curl
  #       run: |
  #         apt-get update && apt-get install -y curl
  #     - name: Setup sccache
  #       uses: mozilla-actions/sccache-action@v0.0.3
  #       with:
  #         version: "v0.4.2"
  #     - name: Install Rust
  #       uses: dtolnay/rust-toolchain@stable
  #     - name: Install dependencies
  #       run: |
  #         scripts/install_ubuntu_dependencies.sh
  #     - name: Install wasm-pack
  #       run: cargo install wasm-pack
  #     - name: Build packages (kanidm-unixd)
  #       run: make -f platform/debian/Makefile debs/kanidm-unixd
  #     - name: Upload debs
  #       uses: actions/upload-artifact@v3
  #       with:
  #         name: ubuntu-packages
  #         path: |
  #           target/*.deb
  build-deb-package-arm:
    name: Build deb packages (ARM)
    strategy:
      matrix:
        image:
          - ubuntu:22.04
          # - debian:12
      fail-fast: false
    runs-on: ubuntu-latest
    container:
      image: ${{ matrix.image }}
      env:
        DEBIAN_FRONTEND: noninteractive
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: install curl
        run: |
          apt-get update && apt-get install -y curl
      # - name: Setup sccache
      #   uses: mozilla-actions/sccache-action@v0.0.3
      #   with:
      #     version: "v0.4.2"
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          target: aarch64-unknown-linux-gnu
      - name: Install dependencies
        run: |
          scripts/install_ubuntu_dependencies.sh
      - name: build with target
        run: |
          apt-get -y install libssl-dev pkg-config gcc-aarch64-linux-gnu rsync
          rsync -av /usr/include/x86_64-linux-gnu/openssl/* /usr/include/openssl/
          PKG_CONFIG_ALLOW_CROSS=1 cargo build -q --target=aarch64-unknown-linux-gnu --release --bin kanidm_unixd --bin kanidm_unixd_tasks --bin kanidm-unix
          mv target/aarch64-unknown-linux-gnu/release/kanidm* target/release/
      # - name: Install wasm-pack
      #   run: cargo install wasm-pack
      - name: Build packages (kanidm-unixd)
        run: ARCH=arm64 make -f platform/debian/Makefile debs/kanidm-unixd
      # - name: Upload debs
      #   uses: actions/upload-artifact@v3
      #   with:
      #     name: ubuntu-packages
      #     path: |
      #       target/*.deb
  upload-to-releases:
    permissions:
      # https://docs.github.com/en/actions/using-jobs/assigning-permissions-to-jobs
      contents: write # allows the action to create a release

    name: Upload to releases
    needs:
      # - build-deb-package
      - build-deb-package-arm
    runs-on: ubuntu-latest
    if: ${{ github.ref == 'refs/heads/master' && github.repository == 'kanidm/kanidm' }}
    steps:
      - name: Download previously built debs
        uses: actions/download-artifact@v3
        with:
          name: ubuntu-packages
      - name: List packages
        run: |
          ls
      - uses: "marvinpinto/action-automatic-releases@latest"
        with:
          repo_token: "${{ secrets.GITHUB_TOKEN }}"
          automatic_release_tag: "debs"
          prerelease: true
          title: ".deb Packages"
          files: "*.deb"
