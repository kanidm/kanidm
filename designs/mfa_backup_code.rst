
Account recovery (backup) mfa codes draft design
------------------------
MFA requires users to have access to a working physical device, however that might not be always possible.

Backup mfa code allows:

- single-device accounts to be restored
- initial setup for passwordless-login

Overview
------------------------

If the user has a Backup code, then they can replace the TOTP/WebAuthn challenge with it during login. For example, TOTP + password auth will be Backup code + password instead.

To implement this, we can add Backup code as a new AuthCredential, so that it can be used in the auth process.

To validate Backup code, we simply check if the input matches the Backup code saved in database, which should be hashed with salt (similar to how password is validated).

A user can only have one Backup code, if user wants a new Backup code:

- if the existing Backup code is still valid, cannot create new Backup code
- if no existing/valid Backup code, create/replace with a new Backup code

The login session should only last for 5 mins with a Claim that allows users to change login credentials.

Code Generation
------------------------
The Backup code could be generated by TOTP/HOTP, or a cryptographically secure pseudorandom number generator. 
Attackers should not be able to guess it even if they know our source code.

Implementation 1
------------------------

Based on the Microsoft temporary access pass:

Add a new class/object: Backup code policy

- Each Kanidm has a Backup code policy
- Define which users/groups can use the Backup code
   - User can only login if they are included in the Backup code policy
- Define parameters like max/min lifetime, one-time use and length
- Only ``idm_hp_account_manage_priv`` can modify it?

Add a new class/object: Backup code

- Issue and save the Backup code in the database, it must adhere to Backup code policy
- ``idm_account_manage_priv`` can create/read/delete it for normal users, but not themselves?
- ``idm_hp_account_manage_priv`` can create/read/delete it for ``idm_account_manage_priv`` users and normal users?

Workflow
================
1. User request Backup code from high-priv users (``idm_hp_account_manage_priv`` or ``idm_account_manage_priv``) via phone/email/etc.
2. User receive Backup code from high-priv users via phone/email/etc.
3. User login with the Backup code

Implementation 2
------------------------

Add a new class/object: Backup code

- Issue and save the Backup code in the database with predefined parameters of lifetime, one-time use and length
- ``idm_hp_account_manage_priv``, ``idm_account_manage_priv`` and normal users themselves can create/read/delete it?

Workflow
================
1. User request Backup code from high-priv users (``idm_hp_account_manage_priv`` or ``idm_account_manage_priv``) via phone/email/etc.
2. User receive Backup code from high-priv users via phone/email/etc.
3. User login with the Backup code

Or

1. User can generate Backup code themselves if they are already authenticated (for later use)
2. User login with the Backup code when they have no access to TOTP/WebAuth token

Comparing Implementation 1 and 2
------------------------
Implementation 2 is simpler and less "strict" as users can request the Backup code for themselves, but it also gives less control for admin. 

TBD: Who should be able to create/read/delete Backup code in Implementation 1? 

